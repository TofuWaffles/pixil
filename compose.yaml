services:
  frontend:
    container_name: frontend
    build:
      context: ./frontend/
      dockerfile: Dockerfile
      args:
        DOMAIN_URL: "https://${DOMAIN_URL}"
    restart: unless-stopped
    networks:
      - frontend
    environment:
      VITE_DOMAIN_URL: "https://${DOMAIN_URL}"
    volumes:
      - /app/node_modules
      - ./frontend:/app
    profiles: ["prod"]

  frontend-dev:
    container_name: frontend-dev
    build:
      context: ./frontend/
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    networks:
      - frontend-dev
    ports:
      - 3000:3000
    environment:
      VITE_DOMAIN_URL: "http://localhost:3000"
    volumes:
      - /app/node_modules
      - ./frontend:/app
    profiles: ["dev"]

  backend:
    container_name: backend
    build:
      context: ./backend/
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
      JWT_KEY: "${JWT_KEY}"
      ADMIN_PASSWORD: "${ADMIN_PASSWORD}"
      DOMAIN_URL: "https://${DOMAIN_URL}"
      CLASSIFIER_URL: "http://classifier:5000"
      LOG_LEVEL: "DEBUG"
    networks:
      - frontend
      - backend
    ports:
      - 4000:4000
    volumes:
      - type: bind
        target: /pixil-media/
        source: /usr/local/pixil/
    depends_on:
      - postgres
    develop:
      watch:
        - action: rebuild
          path: ./backend/
    profiles: ["prod"]

  backend-dev:
    container_name: backend-dev
    build:
      context: ./backend/
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-dev:5432/${POSTGRES_DB}?sslmode=disable"
      JWT_KEY: "${JWT_KEY}"
      ADMIN_PASSWORD: "${ADMIN_PASSWORD}"
      DOMAIN_URL: "http://localhost"
      CLASSIFIER_URL: "http://classifier-dev:5000"
    networks:
      - frontend-dev
      - backend-dev
    ports:
      - 4000:4000
    volumes:
      - type: bind
        target: /pixil-media/
        source: /usr/local/pixil-dev/
    depends_on:
      - postgres-dev
    develop:
      watch:
        - action: rebuild
          path: ./backend/
    profiles: ["dev"]

  postgres:
    container_name: postgres
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "pg_isready", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["prod"]

  postgres-dev:
    container_name: postgres-dev
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pg_data_dev:/var/lib/postgresql-dev/data
      - ./sql:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - backend-dev
    healthcheck:
      test: ["CMD", "pg_isready", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["dev"]

  classifier:
    container_name: classifier
    build:
      context: ./classifier/
      dockerfile: Dockerfile
    restart: unless-stopped
    networks:
      - backend
      - backend-dev
    ports:
      - 5000:5000
    volumes:
      - type: bind
        target: /pixil-media/
        source: /usr/local/pixil/
        read_only: true
    profiles: ["prod"]
    
  classifier-dev:
    container_name: classifier-dev
    build:
      context: ./classifier/
      dockerfile: Dockerfile
    restart: unless-stopped
    networks:
      - backend
      - backend-dev
    ports:
      - 5000:5000
    volumes:
      - type: bind
        target: /pixil-media/
        source: /usr/local/pixil-dev/
        read_only: true
    profiles: ["dev"]

  nginx-80:
    container_name: nginx
    build:
      context: ./nginx/http/
      dockerfile: Dockerfile
      args:
        DOMAIN_URL: "https://${DOMAIN_URL}"
    restart: unless-stopped
    ports:
      - 80:80
    environment:
      DOMAIN_URL: ${DOMAIN_URL}
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    profiles: ["prod"]

  nginx-443:
    container_name: nginx
    build:
      context: ./nginx/https/
      dockerfile: Dockerfile
      args:
        DOMAIN_URL: "https://${DOMAIN_URL}"
    restart: unless-stopped
    ports:
      - 443:443
    networks:
      - backend
      - frontend
    environment:
      DOMAIN_URL: ${DOMAIN_URL}
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    profiles: ["prod"]

  certbot:
    container_name: certbot
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email ${EMAIL} -d ${DOMAIN_URL} --agree-tos --non-interactive -v
    depends_on:
      - nginx
    profiles: ["prod"]

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  frontend-dev:
    driver: bridge
  backend-dev:
    driver: bridge

volumes:
  pg_data:
  pg_data_dev:
